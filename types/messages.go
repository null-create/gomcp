package types

import (
	"encoding/json"
	"time"
)

// ExecutionStatus indicates the outcome of a tool execution attempt.
type ExecutionStatus string

const (
	StatusSucceeded ExecutionStatus = "succeeded"
	StatusFailed    ExecutionStatus = "failed" // Tool executed but produced an error or unwanted result
	StatusError     ExecutionStatus = "error"  // System-level error trying to execute the tool
)

// Request is a message that expects a response
// It corresponds to a method call with optional parameters.
type Request struct {
	Method string `json:"method"`
	Params any    `json:"params,omitempty"`
}

// Result is a successful response to a Request.
type Result map[string]any

// Error represents a failure in handling a Request.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
	Data    any    `json:"data,omitempty"`
}

// Notification is a one-way message that does not expect a response.
type Notification struct {
	Method string `json:"method"`
	Params any    `json:"params,omitempty"`
}

type ToolDefinition struct {
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Parameters  map[string]any `json:"parameters"`
}

// ToolCallRequest represents the LLM's request to execute a specific tool.
// This structure would typically be part of an Assistant message's `ToolCalls` slice.
type ToolCall struct {
	ID           string          `json:"id"`            // Unique ID for this specific call instance (generated by LLM or orchestrator)
	FunctionName string          `json:"function_name"` // Name of the tool to call (must match a ToolDescription.Name)
	Arguments    json.RawMessage `json:"arguments"`     // Arguments for the tool, formatted as a JSON object matching the ToolDescription.InputSchema. Use json.RawMessage for flexibility.
}

// ToolResultMetadata provides details about the execution of a tool.
// This is embedded within a `Message` where `Role == RoleTool`.
type ToolResultMetadata struct {
	ExecutionStatus ExecutionStatus `json:"execution_status"`        // Succeeded, Failed, Error
	ErrorMessage    string          `json:"error_message,omitempty"` // Details if status is Failed or Error
	OutputHash      string          `json:"output_hash,omitempty"`   // Cryptographic hash of the raw output content (in Message.Content)
	ExecutedAt      time.Time       `json:"executed_at"`             // Timestamp of tool execution completion
	ExecutionEnv    string          `json:"execution_env,omitempty"` // Info about the environment (e.g., "sandbox-v1", "direct-api")
	// Potential Extensions: Latency, cost, logs reference, etc.
}

type ChatCompletionRequest struct {
	Model    string `json:"model"`
	Messages []struct {
		Role      string     `json:"role"`
		Content   string     `json:"content"`
		ToolCalls []ToolCall `json:"tool_calls,omitempty"`
	} `json:"messages"`
	Tools  []ToolDefinition `json:"tools,omitempty"`
	Stream bool             `json:"stream,omitempty"`
}

// Message represents a single turn or piece of information in the interaction history.
type Message struct {
	ID         string              `json:"id"`                     // Unique identifier for this message
	Role       Role                `json:"role"`                   // Who sent this message?
	Content    string              `json:"content"`                // Text content of the message (or tool result data)
	Timestamp  time.Time           `json:"timestamp"`              // Time the message was generated
	ToolCalls  []ToolCall          `json:"tool_calls,omitempty"`   // Assistant requests to call tools (only if Role == RoleAssistant)
	ToolCallID string              `json:"tool_call_id,omitempty"` // Links a Tool Result message back to its request (only if Role == RoleTool)
	ToolResult *ToolResultMetadata `json:"tool_result,omitempty"`  // Metadata about the tool execution (only if Role == RoleTool)
	// Security Note: While content might contain sensitive data, the MCP structure itself
	// should ideally not add *new* vulnerabilities. The focus here is on tool interaction safety.
}
